buildscript {
    ext.kotlin_version = '1.3.61'

    // LIBRARY
    ext.libraryVersion  = '1.4.1'
    ext.previousVersion = '1.4.1'
    ext.dependentVerionLibrary = ext.libraryVersion

    ext.bintrayRepo = 'MvvmArchitectureToolkit'

    ext.publishedGroupId = 'com.mctech.architecture.mvvm'
    ext.libraryName = 'MvvmArchitectureToolkit'

    ext.libraryDescription = 'This is only a personal implementation of MVVM architecture using the concept of "State Machine" to keep your screen components independently. It also has a concept of "interaction" defining exactly what the user can do on your screen turning the testing process extremely easier, because now, you are able to test the "state" of your system.'

    ext.siteUrl = 'https://github.com/MayconCardoso/Mvvm-Architecture-Toolkit'
    ext.gitUrl = 'https://github.com/MayconCardoso/Mvvm-Architecture-Toolkit'

    ext.developerId = 'mayconcardoso'
    ext.developerName = 'Maycon Cardoso'
    ext.developerEmail = 'maycon.santos.cardoso@gmail.com'

    ext.licenseName = 'The Apache Software License, Version 2.0'
    ext.licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    ext.allLicenses = ["Apache-2.0"]

    ext.versions = [
            'minSdk'        : 14,
            'compileSdk'    : 29,
            'targetSdk'     : 29,
            'buildTools'    : '29.0.2',

            'release'       : libraryVersion,
            'code'          : 120,
    ]

    repositories {
        google()
        jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.6.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

allprojects {
    repositories {
        google()
        jcenter()
    }
}

subprojects {
    afterEvaluate { project ->
        if (project.hasProperty('android')) {
            android {
                compileSdkVersion versions.compileSdk
                buildToolsVersion versions.buildTools

                defaultConfig {
                    minSdkVersion versions.minSdk
                    targetSdkVersion versions.targetSdk

                    versionCode versions.code
                    versionName versions.release
                }

                compileOptions {
                    sourceCompatibility JavaVersion.VERSION_1_8
                    targetCompatibility JavaVersion.VERSION_1_8
                }
            }
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

subprojects{
    tasks.withType(Javadoc).all {
        enabled = false
    }
}

task publishCoreLibraries {
    group 'mctech'

    dependsOn ':library:core:clean'
    dependsOn ':library:core:bintrayUpload'

    dependsOn ':library:core-networking:clean'
    dependsOn ':library:core-networking:bintrayUpload'

    dependsOn ':library:view-extentions:clean'
    dependsOn ':library:view-extentions:bintrayUpload'

    doLast {
        println "Core published"
        println "$dependentVerionLibrary"
        println "$libraryVersion"
        println "$previousVersion"
    }
}


task publishDependentLibraries {
    group 'mctech'

    dependsOn ':library:core-testing:clean'
    dependsOn ':library:core-testing:bintrayUpload'

    dependsOn ':library:core-extentions:clean'
    dependsOn ':library:core-extentions:bintrayUpload'

    dependsOn ':library:core-databinding:clean'
    dependsOn ':library:core-databinding:bintrayUpload'

    doLast {
        println "Dependent published"
        println "$dependentVerionLibrary"
        println "$libraryVersion"
        println "$previousVersion"
    }
}
